package main

import (
	"context"
	"fmt"
	"log"
	"net/http"

	greetv1 "ycrpc/proto/gen/ycrpc/v1"        // generated by protoc-gen-go
	"ycrpc/proto/gen/ycrpc/v1/ycrpcv1connect" // generated by protoc-gen-connect-go
)

type GreetServer struct{}

func (s *GreetServer) Greet(
	ctx context.Context,
	req *greetv1.GreetRequest,
) (*greetv1.GreetResponse, error) {
	res := &greetv1.GreetResponse{
		Greeting: fmt.Sprintf("Hello, %s!", req.Name),
	}
	return res, nil
}

func main() {
	log.SetFlags(log.LstdFlags | log.Lshortfile)

	greeter := &GreetServer{}
	mux := http.NewServeMux()

	path, handler := ycrpcv1connect.NewGreetServiceHandler(greeter)
	mux.Handle(path, handler)

	p := new(http.Protocols)
	p.SetHTTP1(true)
	// Use h2c so we can serve HTTP/2 without TLS.
	p.SetUnencryptedHTTP2(true)

	log.Println("Starting server on localhost:8080")
	log.Println("Try: curl -X POST -k http://localhost:8080/ycrpc.v1.GreetService/Greet -d '{\"name\":\"World\"}' -H 'Content-Type: application/json'")

	s := http.Server{
		Addr:      "localhost:8080",
		Handler:   mux,
		Protocols: p,
	}
	s.ListenAndServe()
}
