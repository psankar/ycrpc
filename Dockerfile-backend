# Multi-stage build for Go application with buf code generation

# Stage 1: Build stage with buf and protoc tools
FROM golang:1.25.2-alpine AS builder

# Install git and other build dependencies
RUN apk add --no-cache git

# Set working directory
WORKDIR /app

# Copy go mod files first for better caching
COPY go.mod go.sum ./
RUN go mod download

# Install buf and required protoc plugins
RUN go install github.com/bufbuild/buf/cmd/buf@latest && \
  go install google.golang.org/protobuf/cmd/protoc-gen-go@latest && \
  go install connectrpc.com/connect/cmd/protoc-gen-connect-go@latest

# Copy proto files and buf configuration
COPY proto/ ./proto/

# Generate protobuf and connect libraries
WORKDIR /app/proto
RUN buf mod update && buf lint && buf generate

# Copy the rest of the application
WORKDIR /app
COPY go/ ./go/

# Build the application
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o ycrpc-server ./go/cmd/ycrpc-server.go

# Stage 2: Final minimal image
FROM alpine:latest

# Install ca-certificates for HTTPS requests
RUN apk --no-cache add ca-certificates

# Create non-root user
RUN addgroup -g 1000 appgroup && \
  adduser -D -s /bin/sh -u 1000 -G appgroup appuser

WORKDIR /app

# Copy the binary from builder stage
COPY --from=builder /app/ycrpc-server .

# Change ownership to non-root user
RUN chown appuser:appgroup /app/ycrpc-server

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8080

# Run the application
CMD ["./ycrpc-server"]
